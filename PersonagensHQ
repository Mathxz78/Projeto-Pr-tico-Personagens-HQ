/*
------------------------------------------------------------
Trabalho de Introdução aos Algoritmos
Tema: Personagens de Quadrinho

Alunos:
- Matheus Botelho Pereira
- Nielon Cardoso dos Reis
- Otavio Augusto Silvério Silva

Professor: Igor Enrick de Carvalho
------------------------------------------------------------
*/

#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <cstring>
#include <unistd.h>
#include <unistd.h> 

#define VERDE   "\033[32m"
#define AZUL    "\033[34m"
#define AMARELO "\033[33m"
#define ROXO    "\033[35m"
#define NEGRITO "\033[1m"
#define RESET   "\033[0m"

using namespace std;

struct personagem {
    string nome;
    string alinhamento;
    string publicador;
    int ano;
    bool removido;
};

struct binario {
    char nome[100];
    char alinhamento[50];
    char publicador[50];
    int ano;
    bool removido;
};

void aumentarVetor(personagem *&persona, int &tamanho, int incrementar, int &elementos) {
    personagem *novoVetor = new personagem[tamanho + incrementar];
    for (int j = 0; j < elementos; j++) {
        novoVetor[j] = persona[j];
    }
    delete[] persona;
    persona = novoVetor;
    tamanho += incrementar;
}

void salvarBinario(personagem persona[], int tamanho) {
    ofstream arq("biblioteca.dat", ios::binary| ios::trunc);
    binario b;
    for (int i = 0; i < tamanho; i++) {
        if (!persona[i].removido) {
            strncpy(b.nome, persona[i].nome.c_str(), sizeof(b.nome));
            strncpy(b.alinhamento, persona[i].alinhamento.c_str(), sizeof(b.alinhamento));
            strncpy(b.publicador, persona[i].publicador.c_str(), sizeof(b.publicador));
            b.ano = persona[i].ano;
            b.removido = false;
            arq.write(reinterpret_cast<char*>(&b), sizeof(binario));
        }
    }
    arq.close();
}

void listarPersonagens(personagem persona[], int elementos) {
    bool encontrou = false;
    cout << "Lista de personagens:\n";
    cout << "-------------------------------------------\n";
    for (int i = 0; i < elementos; i++) {
        if (!persona[i].removido) {
            cout << "Nome: " << persona[i].nome << "\n"
                 << "Alinhamento: " << persona[i].alinhamento << "\n"
                 << "Publicador: " << persona[i].publicador << "\n"
                 << "Ano: " << persona[i].ano << "\n"
                 << "-------------------------------------------\n";
            encontrou = true;
        }
    }
    if (!encontrou) {
        cout << "Nenhum personagem disponível para exibir.\n";
    }
}

void carregarBinario(personagem *&persona, int &tamanho, int &elementos) {
    ifstream arq("biblioteca.dat", ios::binary);
    if (!arq.is_open()) return;
    binario b;
    while (arq.read(reinterpret_cast<char*>(&b), sizeof(binario))) {
        if (elementos >= tamanho) {
            aumentarVetor(persona, tamanho, 5, elementos);
        }
        persona[elementos].nome = b.nome;
        persona[elementos].alinhamento = b.alinhamento;
        persona[elementos].publicador = b.publicador;
        persona[elementos].ano = b.ano;
        persona[elementos].removido = b.removido;
        elementos++;
    }
    arq.close();
}

void carregarCSV(personagem persona[], int &elementos, int capacidade) {
    ifstream arq("biblioteca.csv");
    string linha;
    while (getline(arq, linha) && elementos < capacidade) {
        size_t p1 = linha.find(',');
        size_t p2 = linha.find(',', p1 + 1);
        size_t p3 = linha.find(',', p2 + 1);
        persona[elementos].nome = linha.substr(0, p1);
        persona[elementos].alinhamento = linha.substr(p1 + 1, p2 - p1 - 1);
        persona[elementos].publicador = linha.substr(p2 + 1, p3 - p2 - 1);
        persona[elementos].ano = stoi(linha.substr(p3 + 1));
        persona[elementos].removido = false;
        elementos++;
    }
    arq.close();
}

void salvarCSV(personagem persona[], int elementos) {
    ofstream arq("biblioteca.csv");
    for (int i = 0; i < elementos; i++) {
        if (!persona[i].removido) {
            arq << persona[i].nome << ","
                << persona[i].alinhamento << ","
                << persona[i].publicador << ","
                << persona[i].ano << "\n";
        }
    }
    arq.close();
}

void removerPersonagem(personagem persona[], int elementos) {
    string nome;
    cout << "Nome do personagem para remover: ";
    cin.ignore();
    getline(cin, nome);
    for (int i = 0; i < elementos; i++) {
        if (!persona[i].removido && persona[i].nome == nome) {
            persona[i].removido = true;
            cout << "Removido com sucesso!\n";
            return;
        }
    }
    cout << "Personagem não encontrado.\n";
}

void ordenarPorNome(personagem persona[], int elementos) {
    for (int i = 0; i < elementos - 1; i++) {
        int menor = i;
        for (int j = i + 1; j < elementos; j++) {
            if (persona[j].nome < persona[menor].nome) menor = j;
        }
        swap(persona[i], persona[menor]);
    }
    cout << "Ordenado por nome.\n";
}

void ordenarPorAno(personagem persona[], int elementos) {
    for (int i = 1; i < elementos; i++) {
        personagem chave = persona[i];
        int j = i - 1;
        while (j >= 0 && persona[j].ano > chave.ano) {
            persona[j + 1] = persona[j];
            j--;
        }
        persona[j + 1] = chave;
    }
    cout << "Ordenado por ano.\n";
}

int buscaBinariaNome(personagem persona[], int esquerda, int direita, const string &chave) {
    while (esquerda <= direita) {
        int meio = esquerda + (direita - esquerda) / 2;
        if (persona[meio].nome == chave) return meio;
        else if (persona[meio].nome < chave) esquerda = meio + 1;
        else direita = meio - 1;
    }
    return -1;
}

void buscarPorNome(personagem persona[], int elementos) {
    string nome;
    cout << "Digite o nome exato para busca binária: ";
    cin.ignore();
    getline(cin, nome);
    int index = buscaBinariaNome(persona, 0, elementos - 1, nome);
    if (index != -1 && !persona[index].removido) {
        cout << "Encontrado: " << persona[index].nome << ", "
             << persona[index].alinhamento << ", "
             << persona[index].publicador << ", "
             << persona[index].ano << "\n";
    } else {
        cout << "Personagem não encontrado.\n";
    }
}

void exibirIntervalo(personagem persona[], int elementos) {
    int inicio, fim;
    cout << "Ano inicial: ";
    cin >> inicio;
    cout << "Ano final: ";
    cin >> fim;
    if (inicio > fim) swap(inicio, fim);
    for (int i = 0; i < elementos; i++) {
        if (!persona[i].removido && persona[i].ano >= inicio && persona[i].ano <= fim) {
            cout << persona[i].nome << " (" << persona[i].ano << ")\n";
        }
    }
}

void creditos() {
    cout << AZUL << NEGRITO <<	"Obrigado por usar nosso sistema!\n" << RESET;
    cout << AZUL << NEGRITO <<	"Trabalho de Introdução aos Algoritmos\n" << RESET << endl;
    cout << AMARELO << NEGRITO <<	"Tema: Personagens de Quadrinho\n" << RESET << endl;
    cout << VERDE << NEGRITO <<	"Alunos:\n";
    cout << VERDE << NEGRITO <<	"    Matheus Botelho Pereira\n";
    cout << VERDE << NEGRITO <<	"    Nielon Cardoso dos Reis\n";
    cout << VERDE << NEGRITO <<	"    Otávio Augusto Silvério Silva\n";
    cout << ROXO << NEGRITO <<	"Professor:  Igor Enrick de Carvalho\n" << RESET << endl;
    cout << "\n\n";
    sleep(5);
}

int main() {
    int tamanho = 50;
    int elementos = 0;
    personagem *persona = new personagem[tamanho];
    int opcao;
    carregarBinario(persona, tamanho, elementos);

    do {
        cout << "\n ---------------MENU-----------------\n1. Carregar CSV\n2. Salvar CSV\n3. Inserir\n4. Remover\n5. Ordenar\n6. Buscar nome\n7. Exibir intervalo\n8. Salvar Binário\n9. Listar personagens\n0. Sair\nOpcao: ";
        cin >> opcao;
        switch (opcao) {
            case 1:
                carregarCSV(persona, elementos, tamanho);
                break;
            case 2:
                salvarCSV(persona, elementos);
                break;
            case 3:
                if (elementos >= tamanho) aumentarVetor(persona, tamanho, 5, elementos);
                cout << "Nome: ";
                cin.ignore();
                getline(cin, persona[elementos].nome);
                cout << "Alinhamento: ";
                getline(cin, persona[elementos].alinhamento);
                cout << "Publicador: ";
                getline(cin, persona[elementos].publicador);
                cout << "Ano: ";
                cin >> persona[elementos].ano;
                persona[elementos].removido = false;
                elementos++;
                break;
            case 4:
                removerPersonagem(persona, elementos);
                break;
            case 5: {
                string tipo;
                cout << "Ordenar por nome ou ano? ";
                cin >> tipo;
                if (tipo == "nome") ordenarPorNome(persona, elementos);
                else if (tipo == "ano") ordenarPorAno(persona, elementos);
                cout << "Deseja salvar após ordenação? (s/n): ";
                char s;
                cin >> s;
                if (s == 's' || s == 'S') salvarBinario(persona, elementos);
                break;
            }
            case 6:
                buscarPorNome(persona, elementos);
                break;
            case 7:
                exibirIntervalo(persona, elementos);
                break;
            case 8:
                salvarBinario(persona, elementos);
                break;
            case 9:
                listarPersonagens(persona, elementos);
                break;
            case 0:
                creditos(); 
                cout << "Saindo...\n";
                break;
            default:
                cout << "Opção inválida.\n";
        }
    } while (opcao != 0);

    delete[] persona;

    return 0;
}
